#create your db and db user in mysql and enter the connection information here
spring.datasource.url=jdbc:mysql://localhost:3306/videochat_db
spring.datasource.username=springuser
spring.datasource.password=ThePassword

spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=true

##add your gmail account information here. 
#spring.mail.username=youremail@gmail.com
##in order to get an app password, enable 2-step authentication in gmail and then generate an app password.
#spring.mail.password=
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.host=smtp.gmail.com
#spring.mail.port=587

##add secrets here. using openssl is a great way to generate them. 
#vunityapp.recaptchaSecret=
#vunityapp.meetingPasswordEncoderSecret=
#vunityapp.jwtTokenSecret=

##cookies settings. isSecure=false and sameSitePolicy=none are for testing locally, but be aware that this will
##prevent testing with Chrome, as it will not store these cookies. Try using Firefox for local testing
#vunityapp.cookies.isSecure=false
#vunityapp.cookies.sameSitePolicy=none

##passwords for turn servers from https://www.metered.ca/tools/openrelay/. To omit these, replace these with empty strings
##and update the ActiveMeetingService code in the frontend by removing the turn servers from the array of iceServers in peerConnectionConfig
##and commenting out the code in authenticateAsGuest and authenticateAsHost that sets the username & credentials values in peerConnectionConfig
##using the stun server from OpenRelay does not require credentials. To test locally, you will not need turn servers, but they are required
##the app is deployed.
#vunityapp.turnUsername=
#vunityapp.turnPassword=